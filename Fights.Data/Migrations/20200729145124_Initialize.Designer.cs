// <auto-generated />
using System;
using Fights.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fights.Data.Migrations
{
    [DbContext(typeof(FightsContext))]
    [Migration("20200729145124_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fights.Data.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Krk"
                        });
                });

            modelBuilder.Entity("Fights.Data.Entities.Donation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("FightId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FightId");

                    b.ToTable("Donations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 22.4m,
                            CreatedAt = new DateTime(2020, 7, 29, 16, 51, 24, 493, DateTimeKind.Local).AddTicks(1154),
                            FightId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 12.4m,
                            CreatedAt = new DateTime(2020, 7, 29, 16, 51, 24, 496, DateTimeKind.Local).AddTicks(565),
                            FightId = 1L,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("Fights.Data.Entities.Fight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long>("User1Id")
                        .HasColumnType("bigint");

                    b.Property<long>("User2Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Fights");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Vukovarska 238",
                            CityId = 1L,
                            User1Id = 1L,
                            User2Id = 2L
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Ohridska 23",
                            CityId = 2L,
                            User1Id = 4L,
                            User2Id = 5L
                        });
                });

            modelBuilder.Entity("Fights.Data.Entities.Swipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsSuperSwipe")
                        .HasColumnType("int");

                    b.Property<long>("User1Id")
                        .HasColumnType("bigint");

                    b.Property<long>("User2Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Swipes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2020, 7, 29, 16, 51, 24, 496, DateTimeKind.Local).AddTicks(2191),
                            IsSuperSwipe = 1,
                            User1Id = 1L,
                            User2Id = 2L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2020, 7, 29, 16, 51, 24, 496, DateTimeKind.Local).AddTicks(2873),
                            IsSuperSwipe = 0,
                            User1Id = 4L,
                            User2Id = 5L
                        });
                });

            modelBuilder.Entity("Fights.Data.Entities.Donation", b =>
                {
                    b.HasOne("Fights.Data.Entities.Fight", "Fight")
                        .WithMany("Donations")
                        .HasForeignKey("FightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fights.Data.Entities.Fight", b =>
                {
                    b.HasOne("Fights.Data.Entities.City", "City")
                        .WithMany("Fights")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
